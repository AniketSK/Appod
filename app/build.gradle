apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs"


def credentialFile = rootProject.file("credentials.properties")
def credentialProperty = new Properties()
if (credentialFile.exists()) { // If someone just cloned the repo, they wouldn't have the credentials file but don't really need it.
    credentialProperty.load(new FileInputStream(credentialFile))
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.aniketkadam.appod"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "com.aniketkadam.appod.DaggerStubTestRunner"
        // Get either the key from the properties file (for local use), environment variables (for CI use) or a hardcoded constant (for casual cloners of the repo)
        buildConfigField 'String', "APOD_API_KEY", credentialProperty.getOrDefault('apod_api_key', "\"DEMO_KEY\"")
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    kapt {
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas".toString())
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:${versions.kotlin}"
    implementation androidxDependencies.appCompat
    implementation ktxdep.lib
    implementation adxconstraintlayout.lib
    testImplementation testlib.junit


    // Testing
    testImplementation testlib.junit
    androidTestImplementation testlib.junit

    androidTestImplementation adxTestLib.runner
    androidTestImplementation adxTestLib.rules
    androidTestImplementation adxTestLib.testext
    androidTestImplementation adxTestLib.espresso
    androidTestImplementation adxTestLib.espressoContrib
    androidTestImplementation lifecycle.testhelper
    androidTestImplementation room.test

    // Robolectric and everything it needs for its hybrid unit+instrumentation tests
    testImplementation robolectric.lib
    testImplementation adxTestLib.runner
    testImplementation adxTestLib.core
    androidTestImplementation adxTestLib.core
    testImplementation lifecycle.testhelper
    testImplementation room.test

    implementation rxjava.lib
    implementation rxjava.android

    implementation dagger.lib
    kapt dagger.compiler
    kaptAndroidTest dagger.compiler
    implementation dagger.android
    implementation dagger.support
    kapt dagger.androidAnnotationProcessor
    kaptAndroidTest dagger.androidAnnotationProcessor

    // Required to keep dagger 2.19 from being replaced by 2.16 and broken by jetifier.
    kapt jetifier.core
    annotationProcessor jetifier.core

    // Network
    implementation retrofit.lib
    implementation retrofit.adapters
    implementation retrofit.gsonconverter
    implementation gson.lib
    implementation okhttp.lib
    implementation okhttp.interceptor

    // Databases
    // Room
    implementation room.lib
    kapt room.compiler
    kaptAndroidTest room.compiler
    implementation room.extensions
    implementation room.rxjava

    // Paging
    implementation paging.lib
    testImplementation paging.testing

    testImplementation mockito.lib
    testImplementation mockito.android
    androidTestImplementation mockito.android

    testImplementation hamcrest.lib
    androidTestImplementation hamcrest.lib

    implementation timber.lib

    // Lifecycle/Architecture
    implementation lifecycle.extensions
    kapt lifecycle.kotlinCompiler
    implementation lifecycle.reactivestreams

    // Daggermock when used with androidTest, requires the dexOpener to make the classes mockable.
    // mock-maker-inline only works for test, not androidTest. So dexopener and it's instrumentation runner
    // is really required.
    androidTestImplementation daggerMock.lib
    androidTestImplementation daggerMock.kotlin
    androidTestImplementation dexOpener.lib

    implementation glide.lib

    testImplementation mockito.inline

    // Kotlin
    implementation navigation.fragment
    implementation navigation.ui

    implementation time.lib

    testImplementation mockk.lib
    androidTestImplementation mockk.android
    implementation rxjava.relay

}
